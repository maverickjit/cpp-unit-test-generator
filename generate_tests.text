Generate unit tests for the following C++ code using Google Test. Follow these YAML instructions strictly:

<YAML>
instructions:
  - Generate unit tests for every function.
  - Test normal cases and edge cases.
  - Include tests for exceptions.
  - Use descriptive test names.
  - Output only valid C++ code.
</YAML>

<C++ Code>
// my_app.cpp
#include <iostream>
#include <vector>
#include <stdexcept>

// Adds two integers
int add(int a, int b) {
    return a + b;
}

// Subtracts b from a
int subtract(int a, int b) {
    return a - b;
}

// Multiplies two integers
int multiply(int a, int b) {
    return a * b;
}

// Divides a by b, throws if b == 0
double divide(int a, int b) {
    if (b == 0) {
        throw std::invalid_argument("Division by zero");
    }
    return static_cast<double>(a) / b;
}

// Returns the maximum element in a vector
int max_in_vector(const std::vector<int>& v) {
    if (v.empty()) {
        throw std::invalid_argument("Vector is empty");
    }
    int max_val = v[0];
    for (int i = 1; i < v.size(); ++i) {
        if (v[i] > max_val) {
            max_val = v[i];
        }
    }
    return max_val;
}

int main() {
    std::cout << "C++ Application: Basic Math Operations" << std::endl;
    return 0;
}

</C++ Code>
